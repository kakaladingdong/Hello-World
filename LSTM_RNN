import tensorflow as tf
import numpy as np

#导入mnist库
from tensorflow.examples.tutorials.mnist import input_data
mnist=input_data.read_data_sets('MNIST/',one_hot=True)

#hyperparameters
lr=0.001    #learning rate
training_iters=100000   #训练次数
batch_size=128  #自设

n_inputs=28 #行 pixel
n_steps=28  #列 pixel
n_hidden_units=128
n_classes=10    #最终分类

#定义x,y,weights,biases
x=tf.placeholder(tf.float32,[None,n_steps,n_inputs])
y=tf.placeholder(tf.float32,[None,n_classes])
weights={
    'in':tf.Variable(tf.random_normal([n_inputs,n_hidden_units])),
    'out':tf.Variable(tf.random_normal([n_hidden_units,n_classes]))
}
biases={
    'in':tf.Variable(tf.constant(0.1,shape=[n_hidden_units,])),
    'out':tf.Variable(tf.constant(0.1,shape=[n_classes,]))
}

def RNN(X,weights,biases):
    X=tf.reshape(X,[-1,n_inputs])
    X_in=tf.matmul(X,weights['in'])+biases['in']
    X_in=tf.reshape(X_in,[-1,n_steps,n_hidden_units])

    lstm_cell=tf.nn.rnn_cell.BasicLSTMCell(n_hidden_units,forget_bias=1.0,state_is_tuple=True)
    _init_state=lstm_cell.zero_state(batch_size,dtype=tf.float32)

    outputs,states=tf.nn.dynamic_rnn(lstm_cell,X_in,initial_state=_init_state,time_major=False)
    results=tf.matmul(states[1],weights['out'])+biases['out']

    return results

pred=RNN(x,weights,biases)
#loss 和 optimizer的选择很重要
loss=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=pred))
train_op=tf.train.AdamOptimizer(lr).minimize(loss)

# loss=tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred),reduction_indices=[1]))
# train_op=tf.train.AdamOptimizer(0.5).minimize(loss)

output_test=tf.equal(tf.argmax(y,1),tf.argmax(pred,1))
accuracy=tf.reduce_mean(tf.cast(output_test,tf.float32))
init=tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(init)
    step=0
    while step*batch_size<training_iters:
        batch_x,batch_y=mnist.train.next_batch(batch_size)
        batch_x=batch_x.reshape([batch_size,n_steps,n_inputs])
        sess.run([train_op],feed_dict={x:batch_x,y:batch_y,})
        if step%20==0:
            print('accuracy:',sess.run(accuracy,feed_dict={x:batch_x,y:batch_y,}))
        step+=1
