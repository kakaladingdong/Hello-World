#一个简单的分类器
#对mnist库的手写字进行分类

import tensorflow as tf
import numpy as np

#从mnist库导入数据
from tensorflow.examples.tutorials.mnist import input_data
mnist=input_data.read_data_sets('MNIST_data/',one_hot=True)

def add_layer(inputs,insize,outsize,activation_function=None):
    Weights=tf.Variable(tf.random_normal([insize,outsize]))
    biases=tf.Variable(tf.zeros([1,outsize])+0.1)
    Wx_plus_b=tf.matmul(inputs,Weights)+biases
    if activation_function==None:
        outputs=Wx_plus_b
    else:
        outputs=activation_function(Wx_plus_b)
    return outputs
    
#图片为28*28
#搭建网络
xs=tf.placeholder(tf.float32,[None,784])
ys=tf.placeholder(tf.float32,[None,10])

# 训练
output=add_layer(xs,784,10,tf.nn.softmax)

#loss计算选用交差熵函数
loss=tf.reduce_mean(-tf.reduce_sum(ys*tf.log(output),reduction_indices=[1]))
trian_step=tf.train.GradientDescentOptimizer(0.5).minimize(loss)
init=tf.global_variables_initializer()

#测试
output_test=tf.equal(tf.argmax(output,1),tf.argmax(ys,1))
accuracy=tf.reduce_mean(tf.cast(output_test,'float'))

with tf.Session() as sess:
    sess.run(init)
    for i in range(1000):
        #每次取100张图片进行训练
        batch_xs,batch_ys=mnist.train.next_batch(100)
        sess.run(trian_step,feed_dict={xs:batch_xs,ys:batch_ys})
        if i%100==0:
            print('accuracy:',sess.run(accuracy,feed_dict={xs:mnist.test.images,ys:mnist.test.labels}))
